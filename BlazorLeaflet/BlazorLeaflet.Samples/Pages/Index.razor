@page "/"
@using System.Drawing
@using BlazorLeaflet.Models

@using BlazorLeaflet.Samples.Data
@inject BlazorLeaflet.Samples.Data.ProductServices service

@inject CityService cityService
@inject IJSRuntime jsRuntime









<h1>Çanakkale Kafe Sistemi</h1>

<div class="container">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="veri_tablosu">
                <tr>
                    <th>Kafe Id</th>
                    <th>Kafe Adı</th>
                    <th>Çalışan Sayısı</th>
                    <th>Mevcut</th>
                    <th>Açıklama</th>
                    <th>Enlem</th>
                    <th>Boylam</th>
                    <th>Kafeyi Sil</th>
                </tr>
            </thead>
            <tbody>
                @if (Products.Any())
                {
                    @foreach (var product in Products)
                    {
                        <tr @onclick="(() => SetProductForUpdate(product))">
                            <td>@product.Id</td>
                            <td>@product.Name</td>
                            <td>@product.Workers</td>
                            <td>@product.Capacity</td>
                            <td>@product.Description</td>
                            <td>@product.Latitude</td>
                            <td>@product.Longitude</td>
                            <td><button class="btn btn-danger" @onclick="(() => DeleteProduct(product))">Sil</button></td>
                        </tr>
                    } }
                else
                {
                    <tr><td colspan="6"><strong>No products available</strong></td></tr>
                }
            </tbody>
        </table>
    </div>

    <div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">

            <div class="header_properties">Kafe Ekle</div>

            <EditForm Model="@NewProduct">
                <div class="form-group">
                    <label for="name">Kafe Adı</label>
                    <input type="text" id="name" class="form-control" @bind-value="@NewProduct.Name" />
                </div>

                <div class="form-group">
                    <label for="price">Çalışan Sayısı</label>
                    <input type="text" id="price" class="form-control" @bind="@NewProduct.Workers" />
                </div>

                <div class="form-group">
                    <label for="quantity">Mevcut</label>
                    <input type="text" id="quantity" class="form-control" @bind="@NewProduct.Capacity" />
                </div>

                <div class="form-group">
                    <label for="Description">Açıklama</label>
                    <input type="text" id="Description" class="form-control" @bind="@NewProduct.Description" />
                </div>
                <div class="form-group">
                    <label for="Description">Enlem</label>
                    <input type="text" id="latitude" class="form-control" @bind="@NewProduct.Latitude" />
                </div>
                <div class="form-group">
                    <label for="Description">Boylam</label>
                    <input type="text" id="longitude" class="form-control" @bind="@NewProduct.Longitude" />
                </div>
                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="AddNewProduct">Kafeyi Ekle</button>
                </div>
            </EditForm>
        </div>

        <div class="col-5 bg-light m-2 justify-content-end">
            <div class="header_properties">Kafe Güncelle</div>

            <EditForm Model="@UpdateProduct">
                <div class="form-group">
                    <label for="name">Kafe Adı</label>
                    <input type="text" id="name" class="form-control" @bind-value="@UpdateProduct.Name" />
                </div>

                <div class="form-group">
                    <label for="price">Çalışan Sayısı</label>
                    <input type="text" id="price" class="form-control" @bind="@UpdateProduct.Workers" />
                </div>

                <div class="form-group">
                    <label for="quantity">Mevcut</label>
                    <input type="text" id="quantity" class="form-control" @bind="@UpdateProduct.Capacity" />
                </div>

                <div class="form-group">
                    <label for="Description">Açıklama</label>
                    <input type="text" id="Description" class="form-control" @bind="@UpdateProduct.Description" />
                </div>

                <div class="form-group">
                    <label for="Description">Enlem</label>
                    <input type="text" id="latitude" class="form-control" @bind="@UpdateProduct.Latitude" />
                </div>
                <div class="form-group">
                    <label for="Description">Boylam</label>
                    <input type="text" id="longitude" class="form-control" @bind="@UpdateProduct.Longitude" />
                </div>
                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="UpdateProductData">Kafeyi Güncelle</button>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- You must wrap the map component in a container setting its actual size. -->



</div>

@code
{ private Map _map;

    private Circle _circle;
    List<Product> Products = new List<Product>();




    private async Task UpdateMapMarker()
    {
        //await service.AddProductAsync(NewProduct);
        //NewProduct = new Product();
        //await RefreshProducts();
        Products = await service.GetProductAsync();
        string tooltip_;
        if (Products.Any())
        {
            foreach (var product in Products)
            {
                var LatLng = new LatLng(float.Parse(product.Latitude.ToString()), float.Parse(product.Longitude.ToString()));

                if (product.Description is null)
                    tooltip_ = " Description not exists .... !!! ";
                else
                    tooltip_ = product.Description.ToString();

                var marker = new Marker(LatLng)
                {

                    Draggable = true,
                    Title = product.Name,
                    Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", LatLng.Lat, LatLng.Lng) },
                    Tooltip = new Tooltip { Content = tooltip_ }

                };


                _map.AddLayer(marker);


            }
        }
    }

    private async Task RefreshProducts()
    {
        Products = await service.GetProductAsync();
    }
    public Product NewProduct { get; set; } = new Product();
    private async Task AddNewProduct()
    {
        await service.AddProductAsync(NewProduct);
        NewProduct = new Product();
        await RefreshProducts();
    }

    Product UpdateProduct = new Product();
    private void SetProductForUpdate(Product product)
    {
        UpdateProduct = product;
    }

    private async Task UpdateProductData()
    {
        await service.UpdateProductAsync(UpdateProduct);
        await RefreshProducts();
    }

    private async Task DeleteProduct(Product product)
    {
        await service.DeleteProductAsync(product);
        await RefreshProducts();
    }
    protected override async Task OnInitializedAsync()
    {
        await RefreshProducts();

        _map = new Map(jsRuntime)
        {
            Center = _startAt,
            Zoom = 4.8f
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });

            _map.AddLayer(new Polygon
            {
                Shape = new[]
                { new[] { new PointF(37f, -109.05f), new PointF(41f, -109.03f), new PointF(41f, -102.05f), new PointF(37f, -102.04f) } },
                Fill = true,
                FillColor = Color.Blue,
                Popup = new Popup
                {
                    Content = "How are you doing,"
                }
            });

            _map.AddLayer(new Models.Rectangle
            {
                Shape = new RectangleF(10f, 0f, 5f, 1f)
            });

            _circle = new Circle
            {
                Position = new LatLng(10f, 5f),
                Radius = 10f
            };
            _map.AddLayer(_circle);
        };
    }

    private LatLng _startAt = new LatLng(47.5574007f, 16.3918687f);
    public string CityName { get; set; }


    private void FindCity()
    {
        _circle.Radius = 5000000f;
        var city = cityService.FindCity(CityName);
        if (city != null)
        {
            var marker = new Marker(city.Coordinates)
            {
                Icon = new Icon
                {
                    Url = city.CoatOfArmsImageUrl,
                    ClassName = "map-icon",
                },
                Tooltip = new Tooltip
                {
                    Content = city.Name,
                },
                Popup = new Popup
                {
                    Content = city.Description,
                }
            };

            _map.AddLayer(marker);
        }
    }

    private void ZoomMap()
    {
        _map.FitBounds(new PointF(45.943f, 24.967f), new PointF(46.943f, 25.967f), maxZoom: 5f);
    }

    private void PanToNY()
    {
        _map.PanTo(new PointF(40.713185f, -74.0072333f), animate: true, duration: 10f);
    }
}
